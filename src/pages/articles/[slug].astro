---
import slugify from "slugify"
import BaseLayout from "../../layouts/BaseLayout.astro"
import { Markdown } from 'astro/components';
import IntersectionObserver from "../../components/IntersectionObserver.svelte"
import entities from "entities"
import elasticlunr from "elasticlunr"
import {writeFile} from 'node:fs/promises';
export async function getStaticPaths({ rss }) {
    var index = elasticlunr(function () {
        this.addField('title');
        this.addField('body');
        this.addField('tags')
        this.setRef('id');
    });
  const allPosts = Astro.fetchContent('../../../content/articles/*.md')
  const sortedPosts = allPosts.sort((a,b) => new Date(a) - new Date(b))
    rss({
        // The RSS Feed title, description, and custom metadata.
        title: 'Dustin Knopoff',
        description: 'rustacean, cook, and martial arts enthusiast',
        customData: `<language>en-us</language>`,
        // The list of items for your RSS feed, sorted.
        items: sortedPosts.map(item => ({
        title: item.title,
        description: entities.encodeHTML(item.content.html),
        link: `/articles/${slugify(item.title)}`,
        pubDate: item.date,
        })),
    });
    allPosts.forEach((post) => {
        let tags = []
        if (post.taxonomies?.categories) { tags = [...tags,...post.taxonomies.categories ]}
        if (post.taxonomies?.tags) { tags = [...tags,...post.taxonomies.tags ]}
        index.addDoc({
            id: `/articles/${slugify(post.title)}`,
            title: post.title,
            body: post.content.source,
            tags: JSON.stringify(tags)
        })
    })
    await writeFile("./public/search_index.js", `window.searchIndex = ${JSON.stringify(index.toJSON())}`)
    return allPosts
    .filter(post => (post.title !== "Articles"))
    .map((post) => {
        return {
            props: {post},
            params: { slug: slugify(post.title)}
        }
    })
}

const { post } = Astro.props
const { params } = Astro.request
const headings = post.content.headers

---

<BaseLayout>
<IntersectionObserver>
<div class={headings.length > 0 ? "toc-container": ''}>
    <div class="content animate">
        <h1 class="title">{post.title}</h1>
        <div class="subtitle"><strong>{new Date(post.date).toLocaleString()}</strong></div>
        <Markdown>
            {post.content.source}
        </Markdown>
        <p class="cta">
        {post.extra.link && (
             <a href={post.extra.link} target="_blank" rel="noopener noreferrer nofollow">
        {post.extra.linkText || "See the code"}
    </a>
        )}
         {post.extra.discussion && (
             <a href={post.extra.discussion} target="_blank" rel="noopener noreferrer nofollow">
        {"Join the discussion"}
    </a>
        )}
        </p>
    </div>

        {post.content.headers && (
            <nav class="toc-wrapper">
                {headings.map(heading => (
                    <a href={`#${heading.slug}`} class={`toc-Link toc-Link_h${heading.depth}`} id={`#${heading.slug}`}
      >{ heading.text }</a
    >
                ))}
            </nav>
        )}
    </div>
    </IntersectionObserver>
</BaseLayout>
